# workflow-template.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: iperf3-network-test-template
  namespace: argocd
spec:
  activeDeadlineSeconds: 3600 # 1 hour total workflow timeout
  # Add TTL for the workflow
  ttlStrategy:
    secondsAfterCompletion: 30 # Delete workflow 30 seconds after completion
  # Add pod garbage collection
  podGC:
    strategy: OnWorkflowCompletion

  entrypoint: network-test-suite
  arguments:
    parameters:
      - name: test-id
      - name: server-label
        value: role=blue
      - name: client-label
        value: role=red
      - name: test-duration
        value: "240"
      - name: cleanup-wait
        value: "3"
      - name: server-startup-wait
        value: "3"

  templates:
    - name: network-test-suite
      steps:
        # - - name: cleanup-previous
        #     template: cleanup-previous
        - - name: get-server-nodes
            template: get-server-nodes
        - - name: get-client-nodes
            template: get-client-nodes
        - - name: create-services
            template: create-server-service
            arguments:
              parameters:
                - name: node
                  value: "{{item}}"
                - name: test-id
                  value: "{{workflow.parameters.test-id}}"
            withParam: "{{steps.get-server-nodes.outputs.result}}"
        - - name: deploy-servers
            template: iperf3-server-step
            arguments:
              parameters:
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
        - - name: wait-for-servers
            template: wait-for-servers
        - - name: test-10mbps
            template: iperf3-client-step
            arguments:
              parameters:
                - name: bandwidth
                  value: "10M"
                - name: test-name
                  value: "low-bandwidth"
                - name: client-nodes
                  value: "{{steps.get-client-nodes.outputs.result}}"
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
                - name: test-duration
                  value: "{{workflow.parameters.test-duration}}"
        - - name: test-50mbps
            template: iperf3-client-step
            arguments:
              parameters:
                - name: bandwidth
                  value: "50M"
                - name: test-name
                  value: "medium-bandwidth"
                - name: client-nodes
                  value: "{{steps.get-client-nodes.outputs.result}}"
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
                - name: test-duration
                  value: "{{workflow.parameters.test-duration}}"
        - - name: test-100mbps
            template: iperf3-client-step
            arguments:
              parameters:
                - name: bandwidth
                  value: "100M"
                - name: test-name
                  value: "high-bandwidth"
                - name: client-nodes
                  value: "{{steps.get-client-nodes.outputs.result}}"
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
                - name: test-duration
                  value: "{{workflow.parameters.test-duration}}"
        - - name: final-cleanup
            template: cleanup-all

    - name: cleanup-previous
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          set -ex
          echo "Starting cleanup process..."
          kubectl delete pods -n argocd $(kubectl get pods -n argocd | grep ^iperf3- | awk '{print $1}') --force --grace-period=0
      activeDeadlineSeconds: 60

    - name: get-server-nodes
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          kubectl get nodes -l {{workflow.parameters.server-label}} -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | jq -R . | jq -s .
      activeDeadlineSeconds: 30

    - name: get-client-nodes
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          kubectl get nodes -l {{workflow.parameters.client-label}} -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | jq -R . | jq -s .
      activeDeadlineSeconds: 30

    - name: iperf3-server-step
      inputs:
        parameters:
          - name: server-nodes
      steps:
        - - name: deploy-server
            template: iperf3-server
            arguments:
              parameters:
                - name: node
                  value: "{{item}}"
            withParam: "{{inputs.parameters.server-nodes}}"

    - name: wait-for-servers
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          echo "Waiting {{workflow.parameters.server-startup-wait}} seconds for servers to be ready..."
          sleep {{workflow.parameters.server-startup-wait}}
          kubectl wait --for=condition=ready pod -l app=iperf3-server -n argocd --timeout=60s
      activeDeadlineSeconds: 120

    - name: iperf3-server
      inputs:
        parameters:
          - name: node
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: iperf3-server-{{inputs.parameters.node}}-{{workflow.parameters.test-id}}
            namespace: argocd
            labels:
              app: iperf3-server
              server-node: "{{inputs.parameters.node}}"
              workflow: iperf3-test
              test-id: "{{workflow.parameters.test-id}}"
          spec:
            nodeSelector:
              kubernetes.io/hostname: "{{inputs.parameters.node}}"
            containers:
            - name: server
              image: nicolaka/netshoot
              command:
                - "/bin/bash"
                - "-c"
                - |
                  echo "Starting iperf3 server..."
                  iperf3 -s -V
              ports:
              - name: iperf3
                containerPort: 5201

    - name: iperf3-client-step
      inputs:
        parameters:
          - name: bandwidth
          - name: test-name
          - name: client-nodes
          - name: server-nodes
          - name: test-duration
      script:
        image: bitnami/kubectl
        command: [bash]
        volumeMounts:
          - name: scripts-volume
            mountPath: /scripts
        source: |
          # Print the script content and location for debugging
          echo "Checking script location:"
          ls -la /scripts/
          
          # Make sure script is executable
          chmod +x /scripts/iperf3-client-step.sh
          
          /scripts/iperf3-client-step.sh \
            '{{inputs.parameters.client-nodes}}' \
            '{{inputs.parameters.server-nodes}}' \
            '{{inputs.parameters.test-name}}' \
            '{{workflow.parameters.test-id}}' \
            '{{inputs.parameters.bandwidth}}' \
            '{{inputs.parameters.test-duration}}'
      volumes:
        - name: scripts-volume
          configMap:
            name: iperf3-workflow-scripts
            defaultMode: 0755

    - name: cleanup-all
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          set -ex
          echo "Deleting all test resources..."
          kubectl delete pods,svc -n argocd -l "workflow=iperf3-test,test-id={{workflow.parameters.test-id}}" --force --grace-period=0 --wait=false

    - name: create-server-service
      inputs:
        parameters:
          - name: node
          - name: test-id
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: iperf3-server-{{inputs.parameters.node}}-{{workflow.parameters.test-id}}
            namespace: argocd
            labels:
              app: iperf3-server
              workflow: iperf3-test
              test-id: "{{workflow.parameters.test-id}}"
          spec:
            selector:
              app: iperf3-server
              server-node: "{{inputs.parameters.node}}"
              test-id: "{{workflow.parameters.test-id}}"  # Add this selector
            ports:
            - name: iperf3
              protocol: TCP
              port: 5201
              targetPort: 5201
