apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: iperf3-network-test
  namespace: argocd
spec:
  activeDeadlineSeconds: 1500 # total workflow timeout in seconds

  entrypoint: network-test-suite
  arguments:
    parameters:
      - name: server-label
        value: role=blue
      - name: client-label
        value: role=red
      - name: test-duration
        value: "120" # Duration in seconds for each iperf test
      - name: cleanup-wait
        value: "10" # Time to wait after cleanup
      - name: server-startup-wait
        value: "10" # Time to wait for server to be ready

  templates:
    - name: network-test-suite
      activeDeadlineSeconds: 3000 # 50 minutes timeout for the main template
      steps:
        - - name: cleanup-previous
            template: cleanup-previous
        - - name: get-server-nodes
            template: get-server-nodes
        - - name: get-client-nodes
            template: get-client-nodes
        - - name: create-server-service
            template: iperf3-service
        - - name: deploy-servers
            template: iperf3-server-step
            arguments:
              parameters:
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
        - - name: wait-for-servers
            template: wait-for-servers
        - - name: test-10mbps
            template: iperf3-client-step
            arguments:
              parameters:
                - name: bandwidth
                  value: "10M"
                - name: test-name
                  value: "low-bandwidth"
                - name: client-nodes
                  value: "{{steps.get-client-nodes.outputs.result}}"
                - name: test-duration
                  value: "{{workflow.parameters.test-duration}}"
        - - name: final-cleanup
            template: cleanup-all

    - name: wait-for-servers
      activeDeadlineSeconds: 120 # 2 minutes timeout
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          echo "Waiting {{workflow.parameters.server-startup-wait}} seconds for servers to be ready..."
          sleep {{workflow.parameters.server-startup-wait}}
          kubectl wait --for=condition=ready pod -l app=iperf3-server -n argocd --timeout=60s

    - name: cleanup-previous
      activeDeadlineSeconds: 30 # 30 seconds timeout
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          kubectl delete pods -n argocd -l app=iperf3-server --ignore-not-found
          kubectl delete pods -n argocd -l test-type=iperf3-client --ignore-not-found
          kubectl delete svc -n argocd iperf3-server --ignore-not-found
          echo "Waiting {{workflow.parameters.cleanup-wait}} seconds for cleanup..."
          sleep {{workflow.parameters.cleanup-wait}}

    - name: iperf3-client-step
      activeDeadlineSeconds: 600 # 10 minutes timeout
      inputs:
        parameters:
          - name: bandwidth
          - name: test-name
          - name: client-nodes
          - name: test-duration
      steps:
        - - name: run-client
            template: iperf3-client
            arguments:
              parameters:
                - name: bandwidth
                  value: "{{inputs.parameters.bandwidth}}"
                - name: test-name
                  value: "{{inputs.parameters.test-name}}"
                - name: test-duration
                  value: "{{inputs.parameters.test-duration}}"
                - name: node
                  value: "{{item}}"
            withParam: "{{inputs.parameters.client-nodes}}"

    - name: iperf3-client
      activeDeadlineSeconds: 300 # 5 minutes timeout
      inputs:
        parameters:
          - name: bandwidth
          - name: test-name
          - name: node
          - name: test-duration
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: iperf3-client-{{inputs.parameters.test-name}}-{{inputs.parameters.node}}
            namespace: argocd
            labels:
              test-type: iperf3-client
          spec:
            nodeSelector:
              kubernetes.io/hostname: "{{inputs.parameters.node}}"
            containers:
            - name: client
              image: praqma/network-multitool
              command:
                - /bin/sh
                - -c
                - |
                  echo "Starting iperf3 test for {{inputs.parameters.test-duration}} seconds..."
                  RESULT=$(iperf3 -c iperf3-server.argocd.svc.cluster.local -b {{inputs.parameters.bandwidth}} -t {{inputs.parameters.test-duration}} -J)
                  BANDWIDTH=$(echo $RESULT | jq -r '.end.sum_received.bits_per_second')

                  echo "Pushing metrics to Prometheus..."
                  curl --data-binary @- http://prometheus-pushgateway.monitoring.svc.cluster.local:9091/metrics/job/iperf3_test/test_name/{{inputs.parameters.test-name}}/client_node/{{inputs.parameters.node}} <<EOF
                  # TYPE iperf3_bandwidth_bits_per_second gauge
                  iperf3_bandwidth_bits_per_second{test_name="{{inputs.parameters.test-name}}",client_node="{{inputs.parameters.node}}"} $BANDWIDTH
                  EOF
            restartPolicy: Never
