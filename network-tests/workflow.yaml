apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: iperf3-network-test
  namespace: argocd
spec:
  entrypoint: network-test-suite
  arguments:
    parameters:
      - name: server-label
        value: role=blue
      - name: client-label
        value: role=red
  templates:
    - name: network-test-suite
      steps:
        - - name: get-server-nodes
            template: get-server-nodes
        - - name: get-client-nodes
            template: get-client-nodes
        - - name: create-server-service
            template: iperf3-service
        - - name: deploy-servers
            template: iperf3-server-step
            arguments:
              parameters:
                - name: server-nodes
                  value: "{{steps.get-server-nodes.outputs.result}}"
        - - name: test-10mbps
            template: iperf3-client-step
            arguments:
              parameters:
                - name: bandwidth
                  value: "10M"
                - name: test-name
                  value: "low-bandwidth"
                - name: client-nodes
                  value: "{{steps.get-client-nodes.outputs.result}}"
        - - name: cleanup
            template: cleanup

    - name: iperf3-server-step
      inputs:
        parameters:
          - name: server-nodes
      steps:
        - - name: deploy-server
            template: iperf3-server
            arguments:
              parameters:
                - name: node
                  value: "{{item}}"
            withParam: "{{inputs.parameters.server-nodes}}"

    - name: iperf3-client-step
      inputs:
        parameters:
          - name: bandwidth
          - name: test-name
          - name: client-nodes
      steps:
        - - name: run-client
            template: iperf3-client
            arguments:
              parameters:
                - name: bandwidth
                  value: "{{inputs.parameters.bandwidth}}"
                - name: test-name
                  value: "{{inputs.parameters.test-name}}"
                - name: node
                  value: "{{item}}"
            withParam: "{{inputs.parameters.client-nodes}}"

    - name: get-server-nodes
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          kubectl get nodes -l {{workflow.parameters.server-label}} -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | jq -R . | jq -s .

    - name: get-client-nodes
      script:
        image: bitnami/kubectl
        command: [bash]
        source: |
          kubectl get nodes -l {{workflow.parameters.client-label}} -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | jq -R . | jq -s .

    - name: iperf3-service
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: iperf3-server
            namespace: argocd
          spec:
            selector:
              app: iperf3-server
            ports:
              - protocol: TCP
                port: 5201
                targetPort: 5201

    - name: iperf3-server
      inputs:
        parameters:
          - name: node
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: iperf3-server-{{inputs.parameters.node}}
            namespace: argocd
            labels:
              app: iperf3-server
          spec:
            nodeSelector:
              kubernetes.io/hostname: "{{inputs.parameters.node}}"
            containers:
            - name: server
              image: networkstatic/iperf3
              command: ["iperf3", "-s"]
              ports:
              - containerPort: 5201
            restartPolicy: Never

    - name: iperf3-client
      inputs:
        parameters:
          - name: bandwidth
          - name: test-name
          - name: node
      resource:
        action: create
        manifest: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: iperf3-client-{{inputs.parameters.test-name}}-{{inputs.parameters.node}}
            namespace: argocd
          spec:
            nodeSelector:
              kubernetes.io/hostname: "{{inputs.parameters.node}}"
            containers:
            - name: client
              image: praqma/network-multitool  # This image includes iperf3, curl, jq and other networking tools
              command:
                - /bin/sh
                - -c
                - |
                  # Run the test
                  RESULT=$(iperf3 -c iperf3-server.argocd.svc.cluster.local -b {{inputs.parameters.bandwidth}} -t 30 -J)
                  BANDWIDTH=$(echo $RESULT | jq -r '.end.sum_received.bits_per_second')

                  # Push metrics
                  curl --data-binary @- http://prometheus-pushgateway.monitoring.svc.cluster.local:9091/metrics/job/iperf3_test/test_name/{{inputs.parameters.test-name}}/client_node/{{inputs.parameters.node}} <<EOF
                  # TYPE iperf3_bandwidth_bits_per_second gauge
                  iperf3_bandwidth_bits_per_second{test_name="{{inputs.parameters.test-name}}",client_node="{{inputs.parameters.node}}"} $BANDWIDTH
                  EOF
            restartPolicy: Never

    - name: cleanup
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: iperf3-server
            namespace: argocd
        flags: ["--ignore-not-found"]
